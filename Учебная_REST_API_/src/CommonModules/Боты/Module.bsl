

Процедура КлёвыйBot() Экспорт

	//ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.КлёвыйBot);

	Обработка = Обработки.КлёвыйBot.Создать();
	Обработка.ОбработатьЗапросыНаСервере();

КонецПроцедуры

Процедура ЧтениеСообщенийДляБотов() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Боты.Ссылка КАК Бот,
	|	Боты.НомерАпдейта КАК ПоследнееСообщение
	|ИЗ
	|	Справочник.Боты КАК Боты
	|ГДЕ
	|	Боты.Автосбор
	|	И НЕ Боты.ПометкаУдаления";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;

	//ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЧтениеСообщенийДляБотов);

	Соединение = Новый HTTPСоединение("api.telegram.org", 443,,,,, Новый ЗащищенноеСоединениеOpenSSL());

	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл

		Бот = Выборка.Бот;
		Если Выборка.ПоследнееСообщение = 0 Тогда
			Ресурс = СтрШаблон("bot%1/getUpdates", Бот.Токен);
		Иначе
			Ресурс = СтрШаблон("bot%1/getUpdates?offset=%2", Бот.Токен, Формат(Выборка.ПоследнееСообщение + 1, "ЧГ="));
		КонецЕсли;
		Попытка
			Запрос = Новый HTTPЗапрос(Ресурс);
			Ответ = Соединение.Получить(Запрос);
			ТекстовыеДанныеОтвета = Ответ.ПолучитьТелоКакСтроку();

			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(ТекстовыеДанныеОтвета);
			Результат = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
		Исключение
			ЗаписьЖурналаРегистрации("Чтение сообщений ботов", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		КонецПопытки;

		Если НЕ Результат.Свойство("ok") ИЛИ НЕ Результат.ok Тогда
			ЗаписьЖурналаРегистрации("Чтение сообщений ботов", УровеньЖурналаРегистрации.Ошибка,,, "Что-то пошло не так...");
			Продолжить;
		КонецЕсли;

		СписокЗапросов = Результат.result;
		Для каждого Запрос Из СписокЗапросов Цикл
			Запись = РегистрыСведений.ЗапросыБоту.СоздатьМенеджерЗаписи();
			Запись.Бот = Бот;
			Запись.update_id = Запрос.update_id;
			Запись.Прочитать();
			Если Запись.Выбран() Тогда
				Продолжить;
			КонецЕсли;

			//Если Бот.ДетальнаяОбработкаПолучения Тогда
			//	Обработка = Обработки[Бот.Обработка].Создать();
			//	Обработка.ПриПолученииСообщения(Запрос);
			//	Продолжить;
			//КонецЕсли;

			Запись = РегистрыСведений.ЗапросыБоту.СоздатьМенеджерЗаписи();
			Запись.Бот = Бот;
			Запись.update_id = Запрос.update_id;
			Запись.ДанныеЗапроса = Новый ХранилищеЗначения(Запрос, Новый СжатиеДанных(6));

			Если Запрос.Свойство("callback_query") Тогда

				Сообщение = Запрос.callback_query;
				Отправитель = Сообщение.from;	// У callback_query всегда есть отправитель
				Запись.message_id = Сообщение.id;
				Запись.chat_id = Сообщение.message.chat.id;
				Запись.МоментВремени = ТекущаяУниверсальнаяДата();
				Запись.first_name = Отправитель.first_name;
				Запись.ТекстСообщения = Сообщение.data;
				Запись.ТипСообщения = Перечисления.ТипыСообщения.callbackquery;
				НайденныйКонтрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ТелеграмID", Отправитель.id);
				Если НайденныйКонтрагент.Пустая() Тогда	// У меня так. Да и вовсе не контрагенты у меня там, это я для вас переделал. :)
					НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
					НовыйКонтрагент.ТелеграмID = Отправитель.id;
					НовыйКонтрагент.ТелеграмИмя = Отправитель.first_name;
					Если Отправитель.Свойство("username") Тогда
						НовыйКонтрагент.ТелеграмНик = Отправитель.username;
					КонецЕсли;
					НовыйКонтрагент.Наименование = Отправитель.first_name;
					НовыйКонтрагент.Записать();
					НайденныйКонтрагент = НовыйКонтрагент.Ссылка;
				КонецЕсли;
				Запись.Контрагент = НайденныйКонтрагент;

			ИначеЕсли Запрос.Свойство("message") Тогда

				Сообщение = Запрос.message;
				Запись.message_id = Сообщение.message_id;
				Запись.chat_id = Сообщение.chat.id;
				Запись.МоментВремени = '19700101' + Сообщение.date;
				Если Сообщение.Свойство("from") Тогда
					Отправитель = Сообщение.from;
					Запись.first_name = Отправитель.first_name;
				КонецЕсли;
				Если Сообщение.Свойство("location") Тогда
					Запись.ТипСообщения = Перечисления.ТипыСообщения.location;
				ИначеЕсли Сообщение.Свойство("text") Тогда
					Запись.ТекстСообщения = Сообщение.text;
					Запись.ТипСообщения = Перечисления.ТипыСообщения.message;
				КонецЕсли;
				Попытка	// попытку потом убрать
				Если Сообщение.Свойство("from") Тогда
					НайденныйКонтрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ТелеграмID", Отправитель.id);
					Если НайденныйКонтрагент.Пустая() Тогда
						НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
						НовыйКонтрагент.ТелеграмID = Отправитель.id;
						НовыйКонтрагент.ТелеграмИмя = Отправитель.first_name;
						Если Отправитель.Свойство("username") Тогда
							НовыйКонтрагент.ТелеграмНик = Отправитель.username;
						КонецЕсли;
						НовыйКонтрагент.Наименование = Отправитель.first_name;
						НовыйКонтрагент.Записать();
						НайденныйКонтрагент = НовыйКонтрагент.Ссылка;
					КонецЕсли;
					Запись.Агент = НайденныйКонтрагент;
				КонецЕсли; 
				Исключение
				КонецПопытки;
			Иначе
				// Надо отметить, что бывают и апдейты, которые не подпадают под условия выше. Например, добавление бота в чат генерит сообщение.
				// Если вам надо их фиксировать и обрабатывать, тут допишите свои обработчики.
			КонецЕсли;

			Запись.Записать();

		КонецЦикла; 

		Если СписокЗапросов.Количество() Тогда
			БотОбъект = Бот.ПолучитьОбъект();
			БотОбъект.НомерАпдейта = Запрос.update_id;
			БотОбъект.Записать();
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура СборщикМусора() Экспорт

	// Удаление данные старых сессий
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СессииБотов.Бот,
	|	СессииБотов.Сессия
	|ИЗ
	|	РегистрСведений.СессииБотов КАК СессииБотов
	|ГДЕ
	|	СессииБотов.Бот = ЗНАЧЕНИЕ(Справочник.Боты.КлёвыйBot)
	|	И СессииБотов.ДатаСоздания <= &Граница";
	Запрос.УстановитьПараметр("Граница", ТекущаяДата() - 86400);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		МенеджерЗаписи = РегистрыСведений.СессииБотов.СоздатьМенеджерЗаписи();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи.Бот = Справочники.Боты.КлёвыйBot;
			МенеджерЗаписи.Сессия = Выборка.Сессия;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
	КонецЕсли;

	// Сессии контрагентов тоже надо удалять

КонецПроцедуры
